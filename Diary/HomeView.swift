import SwiftUI
import CoreLocation
////
//////
struct HomeView: View {
    @StateObject private var weatherManager = WeatherManager()
    @ObservedObject private var locationManager = LocationManager()
    @ObservedObject var diaryViewModel: DiaryViewModel
    
    @State private var selectedEntry: DiaryEntry? //  **Â≠òÂÑ≤ÈÅ∏‰∏≠ÁöÑÊó•Ë®ò**
    @AppStorage("selectedEntryID") private var selectedEntryID: String? //  Â≠òÂÑ≤Êó•Ë®ò IDÔºàÊîπÁÇ∫ StringÔºâ
    @AppStorage("lastSelectedDate") private var lastSelectedDate: String? //  Â≠òÂÑ≤‰∏äÊ¨°ÈÅ∏ÊìáÁöÑÊó•Êúü
    @Binding var selectedTab: Int // ÈÄèÈÅéÁ∂ÅÂÆö‰æÜÂàáÊèõ TabView
    @StateObject private var aiManager = AIManager() // AI ÁÆ°ÁêÜÂô®

    // ÂèñÂæóÁï∂ÂâçÊó•Êúü
    private var currentDate: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "MÊúàdËôü EEEE"
        formatter.locale = Locale(identifier: "zh_Hant")
        return formatter.string(from: Date())
    }

    var body: some View {
        VStack {
            // È°ØÁ§∫Â§©Ê∞£Ë≥áË®ä
            HStack {
                VStack(alignment: .leading, spacing: 5) {
                    Text(currentDate) // È°ØÁ§∫Êó•ÊúüËàáÊòüÊúü
                        .foregroundColor(.black)
                        .font(.system(size: 30, weight: .bold)) // **ËÆì VStack ÂÖßÁöÑÊñáÂ≠óÂ§ßÂ∞èÁµ±‰∏Ä**
                    HStack(spacing: 5) {
                        Image(systemName: weatherManager.conditionSymbol) // Â§©Ê∞£ÂúñÁ§∫
                            .foregroundColor(.black)
                        Text(weatherManager.temperature) // Ê∫´Â∫¶
                            .foregroundColor(.black)
                    }
                    .font(.system(size: 20, weight: .bold)) // **ËÆì VStack ÂÖßÁöÑÊñáÂ≠óÂ§ßÂ∞èÁµ±‰∏Ä**
                }

                Spacer()
                Button(action: {}) {
                    Image(systemName: "gearshape.fill") // Ë®≠ÂÆöÊåâÈàï
                        .foregroundColor(.black)
                }
            }
            .padding()
            
            Spacer()
            
            if let randomEntry = randomEntry { //  **‰∏ÄÂ§©ÂÖßÂè™ÈÅ∏Êìá‰∏ÄÊ¨°**
                ZStack(alignment: .bottomTrailing) { // **ÁôΩËâ≤ÂçÄÂ°äÈù†Âè≥**
                    // **ÁÖßÁâáËÉåÊôØ**
                    if let imageData = randomEntry.imageData, let uiImage = UIImage(data: imageData) {
                        Image(uiImage: uiImage)
                            .resizable()
                            .scaledToFill()
                            .frame(width: UIScreen.main.bounds.width * 0.85, height: UIScreen.main.bounds.width * 1.3) //  **Ë™øÊï¥ÂúñÁâáÊØî‰æã**
                            .clipped()
                            .cornerRadius(12) //  **ÂúìËßí**
                    } else {
                        // **Ëã•ÁÑ°ÁÖßÁâáÂâáÈ°ØÁ§∫ÁÅ∞Ëâ≤ËÉåÊôØ**
                        Rectangle()
                            .fill(Color.gray.opacity(0.5))
                            .frame(width: UIScreen.main.bounds.width * 0.85, height: UIScreen.main.bounds.width * 1.3) //  **Ë™øÊï¥ÊØî‰æã**
                            .cornerRadius(15)
                    }

                    // **ÁôΩËâ≤Ë≥áË®äÂçÄÂ°ä**
                    VStack(alignment: .leading, spacing: 5) {
                        // **Êó•Êúü**
                        Text(randomEntry.date ?? "ÁÑ°Êó•Êúü")
                            .font(.headline)
                            .bold()
                            .foregroundColor(.black)

                        // **Êó•Ë®òÂÖßÂÆπ**
                        Text(randomEntry.text ?? "Ê≤íÊúâÂÖßÂÆπ")
                            .font(.subheadline)
                            .foregroundColor(.gray)
                            .multilineTextAlignment(.leading) // **Á¢∫‰øùÊèõË°åÂæå‰πüÈù†Â∑¶**
                            .lineLimit(2) //  **ÊúÄÂ§öÈ°ØÁ§∫ÂÖ©Ë°å**

                    }
                    .padding(12)
                    .frame(width: UIScreen.main.bounds.width * 0.65, alignment: .leading) // **Á∏ÆÂ∞èÁôΩËâ≤ÂçÄÂ°äÔºå‰ΩøÂÖ∂Èù†Âè≥**
                    .background(Color.white)
                    .clipShape(CustomShape()) // **‰ΩøÁî®Ëá™Ë®ÇÂΩ¢ÁãÄÔºåÂè≥ÂÅ¥ÁÑ°ÂúìËßí**
                    .shadow(radius: 2)
                    .offset(x: 0, y: -10) // **Èù†Âè≥Â∞çÈΩäÔºåË≤ºÈΩäÈÇäÁ∑£**
                }
                .frame(width: UIScreen.main.bounds.width * 0.9) //  **Á®çÂæÆÂ§ßÊñºÁÖßÁâáÂ∞∫ÂØ∏**
                .cornerRadius(15) //  **Ë™øÊï¥Âç°ÁâáÂúìËßí**
                .shadow(radius: 3)
                .onTapGesture { //  **ÈªûÊìäÂæåÈÄ≤ÂÖ•Êó•Ë®òË©≥ÊÉÖÈ†Å**
                    selectedEntry = randomEntry
                }
            } else {
                VStack {
                    Text("ÁõÆÂâçÈÇÑÊ≤íÊúâÊó•Ë®ò")
                        .font(.headline)
                        .foregroundColor(.gray)
                    Button(action: {
                        selectedTab = 2 //  ÂàáÊèõÂà∞„ÄåÂØ´Êó•Ë®ò„ÄçTab
                    }) {
                        Text("ÂØ´‰∏ãÁ¨¨‰∏ÄÁØáÊó•Ë®òÂêßÔºÅ")
                            .font(.headline)
                            .padding()
                            .frame(maxWidth: .infinity)
                            .background(Color.blue)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                    }
                    .padding()
                }
            }

            Spacer()
            
            //  È°ØÁ§∫ AI Áî¢ÁîüÁöÑÈºìÂãµÂõûÊáâÔºàÂ¶ÇÊûúÊ≤íÊó•Ë®òÔºåÂ∞±È°ØÁ§∫Ê≠°ËøéË®äÊÅØÔºâ
            HStack(alignment: .center, spacing: 8) {
                Image("cat")
                    .resizable()
                    .scaledToFit()
                    .frame(height: 50)
                Text(aiManager.aiResponse) // ÈÄôË£°È°ØÁ§∫ AI ÂõûÊáâ
                    .font(.headline)
                    .lineLimit(3)
                    .fixedSize(horizontal: false, vertical: true)
            }
            .padding()
        }
        .onAppear {
            Task {
                //await aiManager.fetchAIResponse(from: diaryViewModel)
                while locationManager.currentLocation == nil {
                    print(" Á≠âÂæÖ GPS ‰ΩçÁΩÆÊõ¥Êñ∞...")
                    try? await Task.sleep(nanoseconds: 500_000_000) // Á≠âÂæÖ 0.5 Áßí
                }
                
//                if let location = locationManager.currentLocation {
//                    print("üìç ÊàêÂäüÁç≤Âèñ GPS ‰ΩçÁΩÆ: \(location.coordinate.latitude), \(location.coordinate.longitude)")
//                    await weatherManager.fetchWeather(for: location)
//                } else {
//                    print(" GPS ‰ΩçÁΩÆÂ∞öÊú™Áç≤Âèñ")
//                }
            }
        }
//        .onChange(of: diaryViewModel.diaryEntries) { _ in
//            Task {
//                await aiManager.fetchAIResponse(from: diaryViewModel) //  Áõ£ËÅΩÊó•Ë®òËÆäÊõ¥ÔºåÈáçÊñ∞Áç≤Âèñ AI ÂõûÊáâ
//            }
//        }
        .background(
            LinearGradient(
                gradient: Gradient(colors: [Theme.backgroundColor, Theme.cardBackground]),
                startPoint: .top,
                endPoint: .bottom
            )
        )
        .fullScreenCover(item: $selectedEntry) { entry in //  **ÂΩàÂá∫ DiaryDetailView**
            DiaryDetailView(entry: entry)
        }
    }
    
    var randomEntry: DiaryEntry? {
        let today = currentDateString()

        //  Â¶ÇÊûú‰ªäÂ§©Â∑≤Á∂ìÈÅ∏ÊìáÈÅéÔºåÁõ¥Êé•ËøîÂõûÁõ∏ÂêåÁöÑÊó•Ë®ò
        if let lastDate = lastSelectedDate, lastDate == today,
           let storedID = selectedEntryID, // storedID ÊòØ String
           let entry = diaryViewModel.diaryEntries.first(where: { $0.id?.uuidString == storedID }) {
            return entry
        }

        //  Â¶ÇÊûú‰ªäÂ§©ÈÇÑÊ≤íÈÅ∏ÊìáÈÅéÔºåÂ∞±Èö®Ê©üÈÅ∏‰∏ÄÁØá‰∏¶Â≠òÂÑ≤
        if let newEntry = diaryViewModel.diaryEntries.randomElement() {
            selectedEntryID = newEntry.id?.uuidString //  ËΩâÁÇ∫ String Â≠òÂÑ≤
            lastSelectedDate = today
            return newEntry
        }

        return nil
    }

    //  **Áç≤Âèñ‰ªäÂ§©ÁöÑÊó•ÊúüÂ≠ó‰∏≤**
    private func currentDateString() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyyMMdd"
        return formatter.string(from: Date())
    }
}


struct CustomShape: Shape {
    func path(in rect: CGRect) -> Path {
        var path = Path()
        path.move(to: CGPoint(x: rect.minX, y: rect.minY))
        path.addLine(to: CGPoint(x: rect.maxX, y: rect.minY)) // Âè≥‰∏äËßí
        path.addLine(to: CGPoint(x: rect.maxX, y: rect.maxY)) // Âè≥‰∏ãËßí
        path.addLine(to: CGPoint(x: rect.minX, y: rect.maxY)) // Â∑¶‰∏ãËßí
        path.addArc(center: CGPoint(x: rect.minX + 12, y: rect.maxY - 12), radius: 12, startAngle: .degrees(90), endAngle: .degrees(180), clockwise: false)
        path.addLine(to: CGPoint(x: rect.minX, y: rect.minY + 12))
        path.addArc(center: CGPoint(x: rect.minX + 12, y: rect.minY + 12), radius: 12, startAngle: .degrees(180), endAngle: .degrees(270), clockwise: false)
        path.closeSubpath()
        return path
    }
}
